{"version":3,"sources":["components/Timer.js","components/Title.js","components/Length.js","components/Button.js","constants.js","components/App.js","serviceWorker.js","index.js"],"names":["Timer","className","id","this","props","labelId","sessionTitle","timeLeftId","timeLeft","React","Component","Title","title","Length","textId","text","incrementId","onClick","incrementMethod","durationId","time","decrementId","decrementMethod","Button","buttonId","INITIAL_STATE","sessionDuration","breakDuration","currentSessionType","isTimerRunning","intervalID","App","state","componentDidMount","formatTime","setState","incrementDuration","e","target","decrementDuration","resetDurations","clearCurrentInterval","audio","document","getElementById","pause","currentTime","startStopSession","startInterval","min","slice","sec","setInterval","playAlertSound","clearInterval","play","toString","padStart","src","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.bfb623bd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Timer extends React.Component {\n    render() {\n      return (\n        <div className=\"timer-container\">\n          <h2 id={this.props.labelId}>{this.props.sessionTitle}</h2>\n          <h3 id={this.props.timeLeftId}>{this.props.timeLeft}</h3>\n        </div>\n      );\n    }\n  }\n\nexport { Timer };","import React from 'react';\n\nconst Title = (props) => {\n    return <h1>{props.title}</h1>;\n  };\n\nexport { Title };","import React from 'react';\n\nclass Length extends React.Component {\n    render() {\n      return (\n        <div>\n          <h3 id={this.props.textId}>{this.props.text}</h3>\n          <button\n            className=\"noselect\"\n            id={this.props.incrementId}\n            onClick={this.props.incrementMethod}\n          >\n            ⇧\n          </button>\n          <p id={this.props.durationId}>{this.props.time}</p>\n          <button\n            className=\"noselect\"\n            id={this.props.decrementId}\n            onClick={this.props.decrementMethod}\n          >\n            ⇩\n          </button>\n        </div>\n      );\n    }\n  }\n\nexport { Length };","import React from 'react';\n\nclass Button extends React.Component {\n    render() {\n      return (\n        <button className=\"noselect\" id={this.props.buttonId} onClick={this.props.onClick}>\n          {this.props.text}\n        </button>\n      );\n    }\n  }\n\nexport { Button };","// default constant values\nconst DEFAULT_SESSION_DURATION = 25;\nconst DEFAULT_BREAK_DURATION = 5;\n\nexport const ALERT_SOUND =\n  \"https://s3-us-west-2.amazonaws.com/s.cdpn.io/3/success.mp3\";\nexport const INITIAL_STATE = {\n  sessionDuration: DEFAULT_SESSION_DURATION,\n  breakDuration: DEFAULT_BREAK_DURATION,\n  currentSessionType: \"work\",\n  isTimerRunning: false, // whether a session is currently running\n  timeLeft: \"25:00\",\n  intervalID: \"\"\n}\n","import React from 'react';\nimport { Timer } from './Timer';\nimport { Title } from './Title';\nimport { Length } from './Length';\nimport { Button } from './Button';\nimport { ALERT_SOUND, INITIAL_STATE } from '../constants';\n\nclass App extends React.Component {\nstate = INITIAL_STATE;\n\ncomponentDidMount = () => {\n  const sessionDuration = this.state.sessionDuration;\n  const timeLeft = this.formatTime(sessionDuration, 0);\n  this.setState({ timeLeft });\n};\n\n// for incrementing either break or session length\nincrementDuration = (e) => {\n  const target = e.target.id;\n  const isTimerRunning = this.state.isTimerRunning;\n\n  switch (target) {\n    case \"session-increment\":\n      let sessionDuration = this.state.sessionDuration;\n      if (sessionDuration < 60 && !isTimerRunning) {\n        sessionDuration++;\n        const timeLeft = this.formatTime(sessionDuration, 0);\n        this.setState({ sessionDuration, timeLeft });\n      }\n      break;\n    case \"break-increment\":\n      let breakDuration = this.state.breakDuration;\n      if (breakDuration < 60 && !isTimerRunning) {\n        breakDuration++;\n        this.setState({ breakDuration });\n      }\n      break;\n      default:\n        break;\n  }\n};\n\n// for decrementing either break or session length\ndecrementDuration = (e) => {\n  const target = e.target.id;\n  const isTimerRunning = this.state.isTimerRunning;\n\n  switch (target) {\n    case \"session-decrement\":\n      let sessionDuration = this.state.sessionDuration;\n      if (sessionDuration > 1 && !isTimerRunning) {\n        sessionDuration--;\n        const timeLeft = this.formatTime(sessionDuration, 0);\n        this.setState({ sessionDuration, timeLeft });\n      }\n      break;\n    case \"break-decrement\":\n      let breakDuration = this.state.breakDuration;\n      if (breakDuration > 1 && !isTimerRunning) {\n        breakDuration--;\n        this.setState({ breakDuration });\n      }\n      break;\n      default:\n        break;\n  }\n};\n\n// resets the app to its default state\nresetDurations = () => {\n  this.setState(INITIAL_STATE);\n  this.clearCurrentInterval();\n  // stops alert sound\n  const audio = document.getElementById(\"beep\");\n  audio.pause();\n  audio.currentTime = 0;\n};\n\n// starts or stops the current session\nstartStopSession = () => {\n  const {\n    sessionDuration,\n    breakDuration,\n    currentSessionType,\n    timeLeft,\n    isTimerRunning\n  } = this.state;\n\n  // if isTimerRunning is true, pause the timer\n  if (isTimerRunning) {\n    this.setState({\n      isTimerRunning: false,\n      sessionDuration,\n      breakDuration\n    });\n\n    this.clearCurrentInterval();\n  } else {\n    // if isTimerRunning is false, start playing the timer\n    this.setState({\n      isTimerRunning: true\n    });\n\n    const intervalID = this.startInterval(currentSessionType, timeLeft);\n\n    // sets interval id in state\n    this.setState({ intervalID });\n  }\n};\n\n// starts counting down based on length\nstartInterval = (currentSessionType, timeLeft) => {\n  let min = timeLeft.slice(0, 2); // gets first two characters\n  let sec = timeLeft.slice(-2); // gets last two characters\n  const interval = setInterval(() => {\n    if (sec === '00' || sec === 0) {\n      min--;\n      sec = 59;\n    } else {\n      sec--;\n    }\n\n    const timeLeft = this.formatTime(min, sec);\n    this.setState({ timeLeft });\n    if (min < 0) {\n      // clear interval\n      this.clearCurrentInterval();\n      // play alert sound\n      this.playAlertSound();\n      // updates isTimerRunning to false\n      this.setState({ isTimerRunning: false });\n\n      // checks the type of current session and starts next one\n      if (currentSessionType === \"work\") {\n        this.setState({\n          timeLeft: this.formatTime(this.state.breakDuration, 0),\n          currentSessionType: \"break\",\n          isTimerRunning: false\n        });\n      } else {\n        this.setState({\n          timeLeft: this.formatTime(this.state.sessionDuration, 0),\n          currentSessionType: \"work\",\n          isTimerRunning: false\n        });\n      }\n      this.startStopSession();\n    }\n  }, 1000);\n  return interval;\n};\n\n// clears the current interval i.e. if stopped or reset\nclearCurrentInterval = () => {\n  clearInterval(this.state.intervalID);\n};\n\n// plays sound indicating end of session\nplayAlertSound = () => {\n  const audio = document.getElementById(\"beep\");\n  audio.play();\n};\n\n// formats passed min and sec to readable format\nformatTime = (min, sec) => {\n  // pads min/sec with a leading 0 if less than 10\n  min = min.toString().padStart(2, 0);\n  sec = sec.toString().padStart(2, 0);\n  const timeLeft = min + \":\" + sec;\n\n  return timeLeft;\n};\n\nrender() {\n  return (\n    <div id=\"container\">\n      <Title title=\"Pomodoro Clock\" />\n      <Timer\n        currentSessionType={this.state.currentSessionType}\n        timeLeft={this.state.timeLeft}\n        timeLeftId=\"time-left\"\n        sessionTitle={this.state.currentSessionType === 'work' ? \"Let's get to Work!\" : \"Time for a Break!\"}\n        labelId=\"timer-label\"\n      />\n      <div className=\"buttons-container\">\n        <Button\n          buttonId=\"start_stop\"\n          text=\"Start/Stop\"\n          onClick={this.startStopSession}\n        />\n        <Button \n          buttonId=\"reset\" \n          text=\"Reset\" \n          onClick={this.resetDurations} \n        />\n      </div>\n      <div className=\"length-container\">\n        <Length\n          text=\"Session Length\"\n          textId=\"session-label\"\n          decrementId=\"session-decrement\"\n          incrementId=\"session-increment\"\n          durationId=\"session-length\"\n          time={this.state.sessionDuration}\n          incrementMethod={this.incrementDuration}\n          decrementMethod={this.decrementDuration}\n        />\n        <Length\n          text=\"Break Length\"\n          textId=\"break-label\"\n          decrementId=\"break-decrement\"\n          incrementId=\"break-increment\"\n          durationId=\"break-length\"\n          time={this.state.breakDuration}\n          incrementMethod={this.incrementDuration}\n          decrementMethod={this.decrementDuration}\n        />\n      </div>\n      <audio id=\"beep\">\n        <source src={ALERT_SOUND} type=\"audio/mpeg\" />\n      </audio>\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}